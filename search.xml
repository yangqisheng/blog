<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java-ArrayList-源码分析（一）</title>
    <url>/2020/06/07/Java-ArrayList-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%B8%80/</url>
    <content><![CDATA[<p>ArrayList是数组实现的顺序表，是泛型Collection Framwork中的一员。本博文尝试分析一下ArrayList的源码，主要是弄懂实现背后的原理，搞清楚为什么要那么实现。为此，采用循序渐进，逐步深入的分析方式。</p>
<ul>
<li>先自己简单实现一遍</li>
<li>对照库的实现，挨个分析库为什么要那么写，那么写有什么好处。</li>
<li>库实现，涉及到哪些巧妙的方法。</li>
</ul>
<p>仔细分析起来，内容还是蛮多。为了不繁杂，博文可能需要分成多个部分，每个部分分析ArrayList中一簇功能。<br>本篇第一篇，先总体概览，再说说ArrayList Constructor。</p>
<span id="more"></span>

<h1 id="顺序表怎么实现"><a href="#顺序表怎么实现" class="headerlink" title="顺序表怎么实现"></a>顺序表怎么实现</h1><p>先考虑一下，如果不去看ArrayList的库实现，要自己写一个ArrayList，我们要怎么做。</p>
<h2 id="定义要实现的ArrayList功能。"><a href="#定义要实现的ArrayList功能。" class="headerlink" title="定义要实现的ArrayList功能。"></a>定义要实现的ArrayList功能。</h2><p>既然是个顺序表，所需功能大体离不开增删改查，再加上构造函数。</p>
<h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><ul>
<li>构造一个空的表。</li>
<li>构造一个有一定容量的表。</li>
<li>通过一个其它集合构造一个顺序表，将集合中元素挨个塞进顺序表。</li>
</ul>
<h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p>顺序表增加的操作，一般来说，有：</p>
<ul>
<li>在末尾增加一个元素。</li>
<li>在某个位置增加一个元素。</li>
<li>将其它集合里面的元素批量增加到末尾。</li>
<li>将其它集合里面的元素批量增加到某个位置。</li>
</ul>
<h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><p>顺序表删除的操作，一般来说，有：</p>
<ul>
<li>删除某个位置上的元素。</li>
<li>删除一个位置区间内所有元素。</li>
<li>从顺序表中删除值为x的个元素。</li>
<li>删除所有元素， 即清空。</li>
</ul>
<h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><p>顺序表修改的操作，有：</p>
<ul>
<li>修改某个位置上的元素。</li>
</ul>
<h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><ul>
<li>获取某个位置上的元素。</li>
<li>查找某个元素在顺序表中的位置。</li>
<li>判断值为x的元素是否包含在顺序表中。</li>
</ul>
<h2 id="初步实现"><a href="#初步实现" class="headerlink" title="初步实现"></a>初步实现</h2><p>由于类功能较简单，我们就直接写代码原型。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package mypackage;</span><br><span class="line"></span><br><span class="line">public class MyArrayList&lt;E&gt; &#123;</span><br><span class="line">    private E[] elementData;</span><br><span class="line">    private int size;</span><br><span class="line">    </span><br><span class="line">    // 创建空的list</span><br><span class="line">    public MyArrayList() &#123;</span><br><span class="line">        elementData = new E[0];</span><br><span class="line">        size = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 创建一个容量为capacity的list，为什么需要这样一个初始容量的构造函数？</span><br><span class="line">    // 只提供默认空构造函数，然后调用增加元素方法进行内部数组申请，不也行么？</span><br><span class="line">    public MyArrayList(int capacity) &#123;</span><br><span class="line">        elementData = new E[capacity];</span><br><span class="line">        size = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 基于其它集合创建顺序表</span><br><span class="line">    public MyArrayList(MyArrayList&lt;E&gt; c) &#123;</span><br><span class="line">        System.arraycopy(c.elementData, 0, elementData, 0, c.size());</span><br><span class="line">        size = c.size();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 在末尾增加元素</span><br><span class="line">    public void add(E e) &#123;</span><br><span class="line">        if (elementData.length == size) &#123;</span><br><span class="line">            ensureCapacity(size + 1);</span><br><span class="line">        &#125;</span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 在某个位置增加元素，要判断参数合法性，如果不合法，是抛异常呢，还是返回错误值呢</span><br><span class="line">    public void add(int index, E e) &#123;</span><br><span class="line">        // check arguments,校验index是否 &lt; 0 或者 &gt; size</span><br><span class="line">        // ...</span><br><span class="line">        </span><br><span class="line">        if (elementData.length == size) &#123;</span><br><span class="line">            ensureCapacity(size + 1);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        // 将index及其后面的元素都往后错一位。System.arraycopy支持区间重叠拷贝。</span><br><span class="line">        System.arraycopy(...);</span><br><span class="line">        elementData[index] = e;</span><br><span class="line">        size += 1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 在某个位置增加另外一个集合内所有元素</span><br><span class="line">    public void add(int index, MyArrayList&lt;E&gt; c) &#123;</span><br><span class="line">        // check arguments</span><br><span class="line">        // ...</span><br><span class="line">        </span><br><span class="line">        if (elementData.length &lt; size + c.size()) &#123;</span><br><span class="line">            ensureCapacity(size + c.size());</span><br><span class="line">        &#125;</span><br><span class="line">        // 先将index往后的元素往后挪，为新元素腾开空位。</span><br><span class="line">        System.copyarray(...);</span><br><span class="line">        // 再讲c里面的元素copy过来</span><br><span class="line">        System.copyarray(...);</span><br><span class="line">        size += c.size();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 删除某个位置元素，如果产生不合法，是否要抛异常。</span><br><span class="line">    // 函数返回值为void是否可以？</span><br><span class="line">    public void remove(int index) &#123;</span><br><span class="line">        // check argument</span><br><span class="line">        // ...</span><br><span class="line">        </span><br><span class="line">        // 将index及其后面的元素往前移动一个位置, memmove操作。</span><br><span class="line">        // 从这里可以看到对于ArrayList，增加，删除操作是O(n)时间复杂度的。</span><br><span class="line">        System.copyarray(...); </span><br><span class="line">        size -= 1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 从集合内删除其它集合内的元素。</span><br><span class="line">    // ArrayList的实现，还有个boolean参数，控制开关，删除包含在c中的元素，还是删除不包含在c中的元素。</span><br><span class="line">    // 可以看做为控制两个集合之差的形式是 A - B 还是 B - A。 </span><br><span class="line">    public void remove(MyArrayList&lt;E&gt; c) &#123;</span><br><span class="line">        E[] newElementData = new E[elementData.length]</span><br><span class="line">        int r = 0;</span><br><span class="line">        int w = 0;</span><br><span class="line">        for (int r = 0; r &lt; size; ++r) &#123;</span><br><span class="line">            if (!c.contains(elementData[r])) &#123;</span><br><span class="line">                newElementData[w++] = elementData[r];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        elementData = newElementData;</span><br><span class="line">        size = w;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 修改某个位置元素值</span><br><span class="line">    public set(int index, E e) &#123;</span><br><span class="line">        // check argument</span><br><span class="line">        // ...</span><br><span class="line">        elementData[index] = e;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 查询</span><br><span class="line">    // 如果index不合法，抛异常。</span><br><span class="line">    public E get(int index) &#123;</span><br><span class="line">        // check argument</span><br><span class="line">        // ...</span><br><span class="line">        return elementData[index];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 查询某个元素所在位置</span><br><span class="line">    public int indexOf(E e) &#123;</span><br><span class="line">        for (int i = 0; i &lt; size; ++i) &#123;</span><br><span class="line">            if (elementData[i].equals(e)) &#123;</span><br><span class="line">                return i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 判断某元素是否在表中</span><br><span class="line">    public boolean contains(E e) &#123;</span><br><span class="line">        return indexOf(e) != -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="对比分析"><a href="#对比分析" class="headerlink" title="对比分析"></a>对比分析</h2><p>将自己写的初步实现代码与JDK中的ArrayList做比较，对每一簇功能细致的比较、分析，搞清楚JDK1.8实现的机理。下面主要讨论下JDK中ArrayList的构造方法，它们与自己实现的preliminary版本区别在哪。</p>
<h3 id="ArrayList构造方法"><a href="#ArrayList构造方法" class="headerlink" title="ArrayList构造方法"></a>ArrayList构造方法</h3><h4 id="ArrayList继承实现关系层次较深。"><a href="#ArrayList继承实现关系层次较深。" class="headerlink" title="ArrayList继承实现关系层次较深。"></a>ArrayList继承实现关系层次较深。</h4><p><a href="https://yangqisheng.github.io/images/ArrayList.png"><img src="https://yangqisheng.github.io/images/ArrayList.png" alt="img"></a></p>
<p>为什么要搞这么复杂的继承及实现关系呢，以后再说。先看几个问题：</p>
<ol>
<li><p>ArrayList extends AbstractList implements List, AbstractList其实已经implements List了，为什么ArrayList还要implements List?</p>
</li>
<li><p>看内部数组声明方式：transient Object[] elementData;<br>a. 为什么用Object[]类型，为什么不用 E[]呢？<br>b. 为什么用transient？<br>c. 为什么用包访问权限？<br>问题2.a，内部数组为什么要用Object[]，我没想明白。在stackoverflow上找到答案。Java里面不能创建泛型数组，编译通不过。看下面代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Container&lt;E&gt; &#123;</span><br><span class="line">    E[] arr = new E[3]; // 这里会有编译错误，error generic array creation</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为什么会这样？这和java的泛型实现有关，细节可以搜索相关资料。那不能用上面代码创建泛型数组，有其它方法吗？stackoverflow有人提出两种方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 方法1</span><br><span class="line">private Ojbect[] arr;</span><br><span class="line">arr = new Object[3];</span><br><span class="line"></span><br><span class="line">E get(int i) &#123;</span><br><span class="line">    return (E)arr[i]; // 每次获取元素都要转换类型，编译时会有unchecked的warning</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 方法2</span><br><span class="line">private E[] arr;</span><br><span class="line">arr = (E[]) new Object[3]; // 这里编译时会有unchecked的warning</span><br><span class="line"></span><br><span class="line">E get(int i) &#123;</span><br><span class="line">    return arr[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两者各有优缺点，java ArrayList是用的方法1。</p>
<p>问题2.b，内部数组为什么要用transient？我们知道transient是禁止字段进行序列化，ArrayList的数据就是保存在elementData数组中的，前面用transient标识，那还怎么对ArrayList进行序列化啊，是不是有点奇怪？我们来想一想，ArrayList内部elementData多数时候是有空余空间的，如果直接用默认序列化方法，那么这些空余空间也会被序列化进去，显然这是不合适的。我们只需要序列化真正的数据部分。于是ArrayList采用的方法是禁用默认序列化方法，重写了序列化和反序列化方法writeObject和readObject方法。</p>
<p>问题2.c，为什么用Default包访问权限，ArrayList自身的注释写着：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">transient Object[] elementData; // non-private to simplify nested class access</span><br></pre></td></tr></table></figure>

<p>简化嵌套类的访问。ArrayList内部有多个迭代器内部类，需要访问elementData。不过，经过我试验，Inner class是可以访问Outer class的private成员的。</p>
</li>
<li><p>基于其它集合构建ArrayList，函数签名中的参数有点怪，那是干什么用的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public MyArrayList(Collection&lt;? extends E&gt; c);</span><br></pre></td></tr></table></figure>

<p>意思是可以接收E类型元素组成的集合，以及E的子类型元素组成的集合。可能有人会觉得，E的子类型集合可以自动转换成E类型集合，就像子类型自动可以转换成它的父类型。<br>不可以的。看下面的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Fruit &#123;&#125;</span><br><span class="line">class Apple extends Furit &#123;&#125;</span><br><span class="line"></span><br><span class="line">Collection&lt;Furit&gt; c = new Collection&lt;&gt;();</span><br><span class="line">c.add(new Fruit());</span><br><span class="line">c.add(new Apple()); // 这是可以的，Apple对象自动转换成Fruit。因为Apple &quot;is-a&quot; Fruit</span><br><span class="line"></span><br><span class="line">/*******************************************************/</span><br><span class="line"></span><br><span class="line">Collection&lt;Fruit&gt; cf = new Collection&lt;&gt;();</span><br><span class="line">cf.add(new Apple());</span><br><span class="line"></span><br><span class="line">Collection &lt;Apple&gt; ca = new Collection&lt;&gt;();</span><br><span class="line">ca.add(new Apple);</span><br><span class="line"></span><br><span class="line">// 假如有个函数接收集合作为参数。下面的定义只能接收Collection&lt;Fruit&gt;的参数，</span><br><span class="line">// 不能接收Collection&lt;Apple&gt;的参数。也就是说：虽然Apple是Fruit，</span><br><span class="line">// 但是“装apple的篮子不是装Fruit的篮子”。</span><br><span class="line">void func(Collection&lt;Fruit&gt; c) &#123;</span><br><span class="line">    // do somethig</span><br><span class="line">&#125;</span><br><span class="line">func(cf); // 可以的。</span><br><span class="line">func(ca); // 不可以。因为 Collection&lt;Apple&gt; &quot;is-not-a&quot; Collection&lt;Fruit&gt;</span><br><span class="line"></span><br><span class="line">/*********有什么办法能让func也能接收Collection&lt;Apple&gt;********/</span><br><span class="line">// 这个函数参数的意思是：能接收所有Fruit及其子类组成的Collection。</span><br><span class="line">void func1(Collection&lt;? extends Fruit&gt;) &#123;</span><br><span class="line">    // do somethig</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里用到了Java泛型中的”通配符(Wildcards)“和”边界(Bounds)“概念。</p>
</li>
</ol>
<ul>
<li><? extends T> 是指”上界通配符“ (Upper Bounds Wildcards)</li>
<li><? super T> 是指”下界通配符“ (Lower Bounds Wildcards)
细节可以搜索相关资料。</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>stackoverflow <a href="https://stackoverflow.com/questions/13776576/why-does-the-arraylist-implementation-use-object">https://stackoverflow.com/questions/13776576/why-does-the-arraylist-implementation-use-object</a><br>知乎 <a href="https://www.zhihu.com/question/20400700">https://www.zhihu.com/question/20400700</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>ArrayList</tag>
        <tag>源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-ArrayList-源码分析（二）</title>
    <url>/2020/06/07/Java-ArrayList-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%BA%8C/</url>
    <content><![CDATA[<p>上一篇讲了ArrayList的几个构造函数。ArrayList的增删改查的实现，比较简单。本篇先讲一个代码效率问题，再着重讲讲ArrayList的迭代器实现。</p>
<span id="more"></span>

<h1 id="查询一个对象的索引位置"><a href="#查询一个对象的索引位置" class="headerlink" title="查询一个对象的索引位置"></a>查询一个对象的索引位置</h1><p>ArrayList的indexOf方法，接收一个Object，返回该Object在ArrayList中的位置。我们看下ArrayList的实现，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 写法一</span><br><span class="line">public int indexOf(Object o) &#123;</span><br><span class="line">    if (o == null) &#123;</span><br><span class="line">        for (int i = 0; i &lt; size; i++)</span><br><span class="line">            if (elementData[i]==null)</span><br><span class="line">                return i;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        for (int i = 0; i &lt; size; i++)</span><br><span class="line">            if (o.equals(elementData[i]))</span><br><span class="line">                return i;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以看到，它是先判断o是否为null，根据结果分别走两个分支，在分支里面用for循环去挨个判断elementData中元素是否等于o。初步看，代码里面好像for循环写了两个，重复了，我们也可以在一个for循环里面判断，写成下面这种形式:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 写法二</span><br><span class="line">public int indexOf(Object o) &#123;</span><br><span class="line">    for (int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">        if (o == null) &#123;</span><br><span class="line">            if (elementData[i] == null)</span><br><span class="line">                return i;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (o.equals(elementData[i]))</span><br><span class="line">                return i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看起来，写法二比写法一少了一句for循环，但是写法二执行效率差一点，每次迭代都要判断一个o是否为null；而写法一只要判断一次o是否为null。所以总的下来，写法一节省了n/2 - 1次比较操作。</p>
<h1 id="迭代器和内部类"><a href="#迭代器和内部类" class="headerlink" title="迭代器和内部类"></a>迭代器和内部类</h1><p>ArrayList的迭代器是内部类实现的。迭代器是内部类的绝佳的应用场景。我们分几步来说明下：</p>
<ul>
<li>为什么要迭代器，不用迭代器，可不可以对ArrayList进行迭代。</li>
<li>迭代器不用内部类实现，用独立的类实现会怎样。</li>
</ul>
<h2 id="为什么要迭代器"><a href="#为什么要迭代器" class="headerlink" title="为什么要迭代器"></a>为什么要迭代器</h2><p>如果不用迭代器，也可以对ArrayList进行迭代。我们直接让ArrayList implements Iterator，增加一个成员变量来记录迭代的位置。这个时候ArrayList “is-a” Iterator。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ArrayList&lt;E&gt; implements Iterator &#123;</span><br><span class="line">    private int next = 0; // index of the next element to return</span><br><span class="line"></span><br><span class="line">    // 其它成员</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   boolean hasNext(); // 是否迭代到尾部</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   E next();          // 返回当前元素，并且后移迭代位置</span><br><span class="line"></span><br><span class="line">   // 其它方法</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* client 对ArrayList进行迭代的时候是这样的 */</span><br><span class="line">ArrayList a = new ArrayList()</span><br><span class="line">// 对a进行了很多插入删除操作后</span><br><span class="line">while (a.hasNext()) &#123;</span><br><span class="line">    doSomething(a.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种实现方式会有什么问题？</p>
<ul>
<li>只支持单向迭代。</li>
<li>一次只支持一个迭代。如果想同时进行两个迭代（比如一个快的，一个慢的），不支持。</li>
</ul>
<h2 id="不用内部类，用单独的类实现"><a href="#不用内部类，用单独的类实现" class="headerlink" title="不用内部类，用单独的类实现"></a>不用内部类，用单独的类实现</h2><p>假如用单独的ArrayListIterator类实现，那么ArrayListIterator类一定要关联一个ArrayList。如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ArrayListIterator&lt;E&gt; implements Iterator &#123;</span><br><span class="line">    private int next;     // index of the next element to return</span><br><span class="line">    private ArrayList&lt;E&gt; c; // 迭代器需要关联的集合</span><br><span class="line"></span><br><span class="line">    &lt;E&gt; ArrayListIterator(ArrayList&lt;E&gt; c) &#123;</span><br><span class="line">        next = 0;</span><br><span class="line">        this.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    boolean hasNext() &#123;</span><br><span class="line">        return next != c.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    E next() &#123;</span><br><span class="line">        return c.get(next++)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你还可以实现一个逆向迭代器如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ReverseArrayListIterator&lt;E&gt; implements Iterator &#123;</span><br><span class="line">    private int next;     // index of the next element to return</span><br><span class="line">    private ArrayList&lt;E&gt; c; // 迭代器需要关联的集合</span><br><span class="line"></span><br><span class="line">    &lt;E&gt; ReverseArrayListIterator(ArrayList&lt;E&gt; c) &#123;</span><br><span class="line">        next = c.size();</span><br><span class="line">        this.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    boolean hasNext() &#123;</span><br><span class="line">        return next != -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    E next() &#123;</span><br><span class="line">        return c.get(next--);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这种方式，貌似解决了之前的“只能单向迭代”以及一次只能用一个迭代器两个问题。但是产生了新的问题：</p>
<ul>
<li>Iterator中的每个方法都要访问及操作内部集合的内部数据，但是都是通过Collection的public方法，不能直接操作Collection内部数据，不仅效率低，而且访问权限受限制。<br>这种实现方式，其实已经很接近内部类的实现方式了。内部类的实现方式解决了访问集合内部数据的限制问题。</li>
</ul>
<h2 id="看内部类的实现方法怎么表演"><a href="#看内部类的实现方法怎么表演" class="headerlink" title="看内部类的实现方法怎么表演"></a>看内部类的实现方法怎么表演</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ArrayList&lt;E&gt; &#123;</span><br><span class="line">    Object[] elementData;</span><br><span class="line">    private int size;</span><br><span class="line">    // 其它成员及方法</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    class ListItr implements Iterator &#123;</span><br><span class="line">        private int next = 0;  // index of the next element to return</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        boolean hasNext() &#123;</span><br><span class="line">            return next == size; // 内部类可以直接访问外部类任何元素，包括成员和方法</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        E next() &#123;</span><br><span class="line">            return elementData[next++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Iterator iterator() &#123;</span><br><span class="line">        return new ListItr();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Client 调用代码*/</span><br><span class="line">ArrayList&lt;String&gt; words = ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">// 插入删除一些String</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Iterator itr = words.iterator();</span><br><span class="line">while (itr.hasNext()) &#123;</span><br><span class="line">    doSomething(itr.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内部类实现的优势：</p>
<ul>
<li>迭代器(内部类)可以直接访问集合(外部类)数据，效率高。</li>
<li>迭代器实现放在集合类内部，代码组织更好。</li>
<li>也可以在集合内部创建各种迭代器类。</li>
</ul>
<p>为什么内部类能够无障碍访问外部类元素，因为内部类有个隐藏的引用，指向外部类对象。通过这个引用就可以访问到外部类对象的元素。</p>
<h2 id="内部类杀手锏"><a href="#内部类杀手锏" class="headerlink" title="内部类杀手锏"></a>内部类杀手锏</h2><blockquote>
<p>如果没有内部类提供的、可以继承多个具体的或抽象的类的能力，一些设计与编程问题就很难解决。从这个角度看，内部类使得多重继承的解决方案变得完整。接口解决了部分问题，而内部类有效地实现了“多重继承”。也就是说，内部类允许继承多个非接口类型（类或抽象类）。</p>
</blockquote>
<p>我们知道Java中没有多继承，只有单继承多implements。有人可能会说，可以implements多个接口，不就相当于多继承吗？非也。接口中不能有成员变量，也就是说一个类，只能从一个父类继承成员变量。那有什么办法能让达到多继承的效果呢？用内部类。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">    private int i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B &#123;</span><br><span class="line">    private int j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class C extends A &#123;</span><br><span class="line">    B makeB() &#123;</span><br><span class="line">        // 返回匿名内部类</span><br><span class="line">        return new B() &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Client 代码*/</span><br><span class="line">C c;</span><br><span class="line">B b = c.makeB(); // 这个b可以看做B的一个匿名子类的对象，同时它的内部又有一个隐藏的指向C对象的引用。C又是A的子类。</span><br></pre></td></tr></table></figure>

<p>通过这种方式，可以达到多继承的效果。细节可以参看 <em>Thinking in java On Java 8</em></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>Thinking in java on java 8</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>ArrayList</tag>
        <tag>源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中的iterable和iterator</title>
    <url>/2020/06/07/Python%E4%B8%AD%E7%9A%84iterable%E5%92%8Citerator/</url>
    <content><![CDATA[<p>Python编程中，我们经常会遇到iterable和iterator的概念，二者之间既有区别又有联系。这篇博文就来详细说说这个话题。</p>
<span id="more"></span>

<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p>迭代器在各种编程语言中都是一个重要的概念。它是对一个对象或数据集合进行遍历的一种抽象。比如一个列表，一个字典，如果需要挨个打印里面的元素，我们就可以针对它们创建一个迭代器，然后就可以很方便的进行遍历了。</p>
<h2 id="Python的iterable和iterator"><a href="#Python的iterable和iterator" class="headerlink" title="Python的iterable和iterator"></a>Python的iterable和iterator</h2><p>Python中除了iterator对象还有iterable对象。我们知道iterator是迭代器，那iterable是个什么东西呢，它是可迭代对象。什么是可迭代对象？我理解就是可以利用迭代器对其进行遍历的东西。<br>Python中规定，只要类实现了__iter__方法并且该方法返回一个iterator的class就是iterable。</p>
<h2 id="iterable"><a href="#iterable" class="headerlink" title="iterable"></a>iterable</h2><p>Python中的list, dict,tuple等基本类型都是iterable，执行下面的python代码可以看到list对象有__iter__方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dir([1, 2, 3, 4,])</span><br></pre></td></tr></table></figure>

<p>下面我们构建一个自己的iterable,设定这个iterable基于一个字符串构建，切词形成一个可迭代的word集合，然后可以对里面的word进行迭代。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyIteratable:</span><br><span class="line">    def __init__(self, string):</span><br><span class="line">        self.string = string</span><br><span class="line"></span><br><span class="line">    # 这里要注意，返回一个iterator对象，利用这个iterator可以对该Myiterable进行迭代。</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return MyIterator(self.string)</span><br><span class="line"></span><br><span class="line">class MyIterator:</span><br><span class="line">    def __init__(self, string):</span><br><span class="line">        pass</span><br><span class="line">    def __next__(self):</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure>

<p>client代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my_iterable = MyIteratable(&quot;It&#x27;s a test&quot;)</span><br><span class="line"></span><br><span class="line"># iter(my_iterable)会自动调用my_iterable.__iter__方法。python类中带有双下划线前后缀的方法叫Magic Methods, 类似的还有__init__, __next__, __repr__等等。</span><br><span class="line">my_iterator = iter(my_iterable)</span><br><span class="line"></span><br><span class="line"># 下面就可以用my_iterator进行迭代了，具体怎么使用iterator进行迭代请看下面</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h2><p>Python中只要实现了__next__方法的class叫iterator（严格来说，还需要实现__iter__，这个后面再讲）。每调用一次next(iterator), 就取出了一个元素。当遍历完最后一个元素后，还调用next(iterator)就会触发StopIteration异常。所以我们利用一个iterator进行迭代时，就有client代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 通过iter(iterable)或者其它方法获取一个迭代器</span><br><span class="line">my_iterator = iter(iterable)</span><br><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        item = next(my_iterator) # 获取到一个元素</span><br><span class="line">    except StopIteration:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure>

<p>next(my_iterator)其实是调用了my_iterator.__next__方法。这个方法每次都需要返回一个元素。接下来，我们来完善上面class MyIterator里面的方法。__next__方法每次返回一个元素，当到达尾部时触发StopIteration异常。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyIteratable:</span><br><span class="line">    def __init__(self, string):</span><br><span class="line">        self.string = string</span><br><span class="line"></span><br><span class="line">    # 这里要注意，返回一个iterator对象，利用这个iterator可以对该Myiterable进行迭代。</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return MyIterator(self.string)</span><br><span class="line"></span><br><span class="line">class MyIterator:</span><br><span class="line">    def __init__(self, string):</span><br><span class="line">        self.words = string.split()</span><br><span class="line">        self.index = 0 # 每次迭代，迭代器都有个位置。</span><br><span class="line"></span><br><span class="line">    def __next__(self):</span><br><span class="line">        if self.index &lt; len(self.words):</span><br><span class="line">            item = self.words[self.index]</span><br><span class="line">            self.index += 1</span><br><span class="line">            return item</span><br><span class="line">        else:</span><br><span class="line">            raise StopIteration()</span><br></pre></td></tr></table></figure>

<p>再次回到上面使用iterator迭代一个iterable的client代码，先要获取iterable的iterator，然后在while循环里面遍历元素，while里面退出条件是捕获到StopIteration异常。我们可以看到，对一个iterable进行迭代太啰嗦了，那么能否有个简洁的方法呢？有！请看下面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i in iterable:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<p>for in 语法就是对上面啰嗦写法的一个简写形式。for in是语言内部进行了上面那些啰嗦的操作。<br>好了，到现在，我们基本捋清了iterable和iterator的区别和联系了吧。总结如下：</p>
<ul>
<li>iterable是可迭代对象，实现了__iter__方法，该方法返回一个可以对自身进行迭代的迭代器。</li>
<li>iterator是迭代器对象，实现了__next__方法，可以对该迭代器所关联的iterable进行迭代。</li>
<li>iterable内部元素数量是可知的，而我们不能通过iterator知道其关联的iterable有多少数量，只能一步一步的next，最后触发StopIteration。</li>
</ul>
<h2 id="重要的一点-iterator也是一个iterable。"><a href="#重要的一点-iterator也是一个iterable。" class="headerlink" title="重要的一点, iterator也是一个iterable。"></a>重要的一点, iterator也是一个iterable。</h2><p>iterator还需要实现__iter__方法，而且该方法很简单就是返回自身，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyIterator:</span><br><span class="line">    def __init__(self, string):</span><br><span class="line">        self.words = string.split()</span><br><span class="line">        self.index = 0 # 每次迭代，迭代器都有个位置。</span><br><span class="line"></span><br><span class="line">    def __next__(self):</span><br><span class="line">        if self.index &lt; len(self.words):</span><br><span class="line">            item = self.words(self.index)</span><br><span class="line">            self.index += 1</span><br><span class="line">            return item</span><br><span class="line">        else:</span><br><span class="line">            raise StopIteration()</span><br><span class="line"></span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return self</span><br></pre></td></tr></table></figure>

<p>iterator为什么要实现__iter__，而且大多数情况下都是返回self。是不是看起来很奇怪？如果没有这个__iter__函数，会不会有问题？这个问题我也是找了好多资料才想明白的。<br>情况是这样的，我们知道一个iterable可以应用在for in 语句中，更进一步，一个iterator也是可以应用在for in 语句中的。当应用在for in 中时，iterator就当做一个iterable使用了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my_list = [1, 2, 3, 4]</span><br><span class="line">my_list_iter = iter(my_list)</span><br><span class="line">for i in my_list_iter:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>

<p>__iter__必须返回一个迭代器，而一个iterator的__iter__函数，它要返回一个迭代器，必然是它自身。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>Python 3 Object-oriented Programming, 2nd Edition</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Iterable</tag>
        <tag>Iterator</tag>
      </tags>
  </entry>
  <entry>
    <title>Java SDK中Timer的分析</title>
    <url>/2020/06/08/java%E4%B8%ADTimer%E5%88%86%E6%9E%90_%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>Java SDK的Timer是一个比较方便的定时器工具类，用来定时或周期性地执行用户提交的任务。其主要解决了简单的任务调度问题，让用户可以简单地提交和取消定时任务。同时Timer的线程安全性也保证了多个线程可以并发地对同一个任务进行调度和取消。</p>
<p>本博文尝试分析一下SDK中的Timer实现。大致从几个方面去介绍：</p>
<ol>
<li>What : Timer是什么，解决什么问题，怎么使用。</li>
<li>How&amp;Why : 内部是怎么实现的，为什么要那么实现。有哪些优点和局限。</li>
<li>When : 什么场景下适合使用Timer。</li>
</ol>
<h2 id="一、Timer是什么"><a href="#一、Timer是什么" class="headerlink" title="一、Timer是什么"></a>一、Timer是什么</h2><blockquote>
<p>A facility for threads to schedule tasks for future execution in a background thread. Tasks may be scheduled for one-time execution, or for repeated execution at regular intervals.</p>
</blockquote>
<p>Timer是JDK1.3引入的定时任务执行器。JDK文档说明了Timer是一个任务执行器，它可以在后台执行一次性或者周期性的任务。比如，我们在日常编码中，可能经常会碰到一个场景，需要定时清理缓存、日志，又或者有些场景需要周期性更新某个状态。那么Timer就是替我们做这些事情的。然而由于Timer的局限性，JDK1.5又引入了ScheduledThreadPoolExecutor，提供更稳定更精确且功能更多的定时执行器。</p>
<blockquote>
<p>Java 5.0 introduced the <code>java.util.concurrent</code> package and one of the concurrency utilities therein is the <a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html"><code>ScheduledThreadPoolExecutor</code></a> which is a thread pool for repeatedly executing tasks at a given rate or delay. It is effectively a more versatile replacement for the <code>Timer</code>/<code>TimerTask</code> combination, as it allows multiple service threads, accepts various time units, and doesn’t require subclassing <code>TimerTask</code> (just implement <code>Runnable</code>). Configuring <code>ScheduledThreadPoolExecutor</code> with one thread makes it equivalent to <code>Timer</code>.</p>
</blockquote>
<span id="more"></span>

<h3 id="Timer的使用场景案例"><a href="#Timer的使用场景案例" class="headerlink" title="Timer的使用场景案例"></a>Timer的使用场景案例</h3><p>tomcat源码example中有个snake的示例程序。功能是使用websocket实现一个贪吃蛇的游戏。每隔100ms，程序需要更新贪吃蛇在屏幕中的位置。那么更新位置信息就可以设置成一个周期性任务。下面是snake程序的代码片段。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnakeTimer</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Timer gameTimer = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> TICK_DELAY = <span class="number">100</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 启动定时执行器</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startTimer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个定时执行器</span></span><br><span class="line">    gameTimer = <span class="keyword">new</span> Timer(SnakeTimer.class.getSimpleName() + <span class="string">&quot; Timer&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 向定时执行器提交一个周期性任务。</span></span><br><span class="line">    gameTimer.scheduleAtFixedRate(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                tick();  <span class="comment">// 更新位置信息</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;Caught to prevent timer from shutting down&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, TICK_DELAY, TICK_DELAY);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">      <span class="keyword">for</span> (Iterator&lt;Snake&gt; iterator = SnakeTimer.getSnakes().iterator();</span><br><span class="line">              iterator.hasNext();) &#123;</span><br><span class="line">          Snake snake = iterator.next();</span><br><span class="line">          snake.update(SnakeTimer.getSnakes());</span><br><span class="line">          sb.append(snake.getLocationsJson());</span><br><span class="line">          <span class="keyword">if</span> (iterator.hasNext()) &#123;</span><br><span class="line">              sb.append(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      broadcast(String.format(<span class="string">&quot;&#123;\&quot;type\&quot;: \&quot;update\&quot;, \&quot;data\&quot; : [%s]&#125;&quot;</span>,</span><br><span class="line">              sb.toString()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stopTimer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (gameTimer != <span class="keyword">null</span>) &#123;</span><br><span class="line">          gameTimer.cancel();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用Timer比较简单，创建一个Timer，然后向Timer提交一个任务。Timer后台线程会在指定的时间自动执行任务。向Timer提交任务主要有两个方法。<code>schedule</code>和<code>scheduleAtFixedRate</code>，一个是提交一次性任务，一个是提交周期性任务。</p>
<h2 id="二、Timer内部的实现"><a href="#二、Timer内部的实现" class="headerlink" title="二、Timer内部的实现"></a>二、Timer内部的实现</h2><h3 id="2-1-几个内部组件"><a href="#2-1-几个内部组件" class="headerlink" title="2.1 几个内部组件"></a>2.1 几个内部组件</h3><p>根据Timer所要实现的功能需求，大致可以分解出几个组件。</p>
<ol>
<li><p>Task，用户提交的任务，想要Timer替我们执行任务，用户得创建一个Task，也就是这个Task得implements Runnable。与Timer协同的任务是TimerTask抽象类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用户任务UserTask需要extends TimerTask，实现run函数，将任务所需要做的事情和访问的资源统一在run函数里面实现。TimerTask需要有个任务状态的标识，标识这个任务处于什么状态，待运行、正在运行、被取消、执行完成。另外，TimerTask还需要有个标识来记录这个Task是一次性的还是周期执行的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> state = VIRGIN; <span class="comment">// 任务状态。没有用enum,为什么</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VIRGIN = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SCHEDULED = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXECUTED = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED = <span class="number">3</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">long</span> nextExecutionTime; <span class="comment">// 下一次执行的时间戳，Timer中小顶堆队列是按照task的这个属性进行比较大小</span></span><br><span class="line">  <span class="keyword">long</span> period = <span class="number">0</span>; <span class="comment">// 任务执行周期，0表示一次性任务</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Timer, 任务执行器。任务执行器执行用户提交的任务，显然需要一个队列来保存任务，同时需要一个内部线程来执行任务。队列中存放的是待运行的任务，这些任务都有个属性，nextExecutionTime下一次运行的时间戳。内部线程在while(true)循环里面执行逻辑：从队列中找出时间戳最近的任务，如果当前时间戳已经达到或超过任务运行时间戳，就执行task.run()来执行任务，对于周期性任务还会将下一次执行的任务实例再次插入队列。这里涉及到几个问题：a. 任务队列用什么数据结构，由于内部线程每次只需要取一个最近时间的任务，容易想到堆或者优先队列。SDK Timer内部使用数组实现的小顶堆。b. 内部线程在没有任务执行或者堆顶任务运行时间还没有到的时候，不能耗费CPU，需要阻塞wait，等待其它用户线程来唤醒或者自己等到一段时间再run。c. 用户任务，Timer内部队列需要线程安全。用户任务为什么需要线程安全？可能用户线程A提交后，用户线程B由于某种原因需要提前终止它。而对于Timer内部队列，可能会有多个用户线程往Timer提交任务，所以也得是线程安全的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Timer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TaskQueue queue = <span class="keyword">new</span> TaskQueue(); <span class="comment">// 内部任务队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TimerThread thread = <span class="keyword">new</span> TimerThread(queue); <span class="comment">// 内部执行线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger nextSerialNumber = <span class="keyword">new</span> AtoicInteger(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面代码可以看出，每个Timer的实例都有一个内部线程和队列。Timer实例对其内部线程进行了编号。</p>
</li>
<li><p>TaskQueue，任务队列，是Timer的内部类，就是一个数组实现的小顶堆。TaskQueue内部没有锁，它的线程安全性是由Timer在访问TaskQueue的时候加锁。</p>
</li>
<li><p>TaskThread，任务线程，也是Timer的内部类。由于TaskThread需要访问TaskQueue，所以在TaskThread构造的时候将Timer的TaskQueue注入进去了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       mainLoop();</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">       <span class="keyword">synchronized</span>(queue) &#123;</span><br><span class="line">         newTaskMayBeScheduled = <span class="keyword">false</span>;</span><br><span class="line">         queue.clear();</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mainLoop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimerTask task;</span><br><span class="line">            <span class="keyword">boolean</span> taskFired;</span><br><span class="line">            <span class="keyword">synchronized</span>(queue) &#123;</span><br><span class="line">                <span class="comment">// Wait for queue to become non-empty</span></span><br><span class="line">                <span class="keyword">while</span> (queue.isEmpty() &amp;&amp; newTasksMayBeScheduled)</span><br><span class="line">                    queue.wait();</span><br><span class="line">                <span class="keyword">if</span> (queue.isEmpty())</span><br><span class="line">                    <span class="keyword">break</span>; <span class="comment">// Queue is empty and will forever remain; die</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// Queue nonempty; look at first evt and do the right thing</span></span><br><span class="line">                <span class="keyword">long</span> currentTime, executionTime;</span><br><span class="line">                task = queue.getMin();</span><br><span class="line">                <span class="keyword">synchronized</span>(task.lock) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (task.state == TimerTask.CANCELLED) &#123;</span><br><span class="line">                        queue.removeMin();</span><br><span class="line">                        <span class="keyword">continue</span>;  <span class="comment">// No action required, poll queue again</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    currentTime = System.currentTimeMillis();</span><br><span class="line">                    executionTime = task.nextExecutionTime;</span><br><span class="line">                    <span class="keyword">if</span> (taskFired = (executionTime&lt;=currentTime)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (task.period == <span class="number">0</span>) &#123; <span class="comment">// Non-repeating, remove</span></span><br><span class="line">                            queue.removeMin();</span><br><span class="line">                            task.state = TimerTask.EXECUTED;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123; <span class="comment">// Repeating task, reschedule</span></span><br><span class="line">                            queue.rescheduleMin(</span><br><span class="line">                              task.period&lt;<span class="number">0</span> ? currentTime   - task.period</span><br><span class="line">                                            : executionTime + task.period);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!taskFired) <span class="comment">// Task hasn&#x27;t yet fired; wait</span></span><br><span class="line">                    queue.wait(executionTime - currentTime);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (taskFired)  <span class="comment">// Task fired; run it, holding no locks</span></span><br><span class="line">                task.run();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们来看看<code>TimerThread.run()</code>的实现。就一个mainLoop循环。外面用try包裹一下，有个finally块负责清理queue。我们看mainLoop是不会抛异常的(queue.wait可能会抛的InterruptedException被mainLoop内部catch住了，task.run也不会抛异常)，为什么TimerThread.run里面要将mainLoop包在try finally块里面呢？原因在于：虽然TimerThread本身在执行mainLoop时不会抛InterruptedExecption，但是外部用户线程可以向TimerThread发送中断信号，于是mainLoop得用try finally块包裹一下。还有一个<strong>重要的原因</strong>，如果运行的UserTimerTask遇到了unchecked exception，那么就会进入到finally块里，将这个Timer设置成terminate状态了。这也是Timer的一个局限。</p>
<p>下面是一个概要图。</p>
<p><img src="https://dzmiba.com/Timer.jpg" alt="Timer"></p>
</li>
</ol>
<h3 id="2-2-优点和局限"><a href="#2-2-优点和局限" class="headerlink" title="2.2 优点和局限"></a>2.2 优点和局限</h3><p>Timer的优点：</p>
<ol>
<li>实现简单，使用起来也很简单。</li>
<li>轻量级，不需要很多系统资源，只有一个后台线程和一个内部任务数组。支持取消任务。</li>
<li>线程安全。Timer内部执行任务是线程安全的。多个线程可以同时使用同一个Timer实例。用户任务自身的线程安全性由用户保证。</li>
</ol>
<p>Timer的局限：</p>
<ol>
<li>无法保证一个任务在精确的时间执行。由于Timer内部只有一个线程去执行任务，假如线程在执行某个任务过程中耗费了太多时间，或者卡住了，那么Timer内部队列里面的任务都会受到影响，因为从内部队列中取任务的也是这个内部线程。它卡住了，就不能保证队列中的任务在预期的时间被取出来执行。所以执行时间比较短的轻量级定时task比较适合使用Timer。</li>
<li>如果某个UserTimeTask运行时出现unchecked exception(比如运行时异常)，那么当前的Timer实例会马上变成terminated状态（就像外部调用了timer.cancel()）。某本书里称这种情况叫“thread leaking”。如果此时再往timer里面提交任务，会触发IllegalStateException: Timer already cancelled。</li>
</ol>
<h2 id="三、Timer内部实现的一些分析"><a href="#三、Timer内部实现的一些分析" class="headerlink" title="三、Timer内部实现的一些分析"></a>三、Timer内部实现的一些分析</h2><h3 id="3-1-Timer内部线程安全性"><a href="#3-1-Timer内部线程安全性" class="headerlink" title="3.1 Timer内部线程安全性"></a>3.1 Timer内部线程安全性</h3><h4 id="3-1-1-内部queue的线程安全性"><a href="#3-1-1-内部queue的线程安全性" class="headerlink" title="3.1.1 内部queue的线程安全性"></a>3.1.1 内部queue的线程安全性</h4><p>外部用户向Timer提交任务时，Timer需要将任务加到内部queue中，同时Timer内部thread需要从queue中取出任务执行，这里有race condition，queue必须要加锁。所以内部线程while循环里面，对queue的访问，使用了<code>synchronized(queue)</code>。外部线程调用schedule或者scheduleAtFixedRate时，同样也使用了<code>synchronized(queue)</code>。外部线程调用cancel时，需要清空queue，也一样使用了同步锁。</p>
<h4 id="3-1-2-Timer内部循环线程对Task也加锁"><a href="#3-1-2-Timer内部循环线程对Task也加锁" class="headerlink" title="3.1.2 Timer内部循环线程对Task也加锁"></a>3.1.2 Timer内部循环线程对Task也加锁</h4><p>从上面Timer内部mainLoop代码中看到，内部线程从queue中取出<strong>最小任务</strong>后，使用了<code>synchronized(task.lock)</code>来修改task的数据，包括修改task.state, 将task重新放回queue。为什么要对task锁一下呢。主要是因为，在task放入Timer之后，可能有用户线程对task执行cancel操作，修改task.state。看下面TimerTask.cancel方法，也加锁了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(lock) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = (state == SCHEDULED);</span><br><span class="line">        state = CANCELLED;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-1-3-TimerThread-newTaskMayBeScheduled起什么作用"><a href="#3-1-3-TimerThread-newTaskMayBeScheduled起什么作用" class="headerlink" title="3.1.3 TimerThread.newTaskMayBeScheduled起什么作用"></a>3.1.3 TimerThread.newTaskMayBeScheduled起什么作用</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line">/**</span><br><span class="line">Terminates this timer, discarding any currently scheduled tasks. Does not interfere with a currently executing task (if it exists). Once a timer has been terminated, its execution thread terminates gracefully, and no more tasks may be scheduled on it.</span><br><span class="line">Note that calling this method from within the run method of a timer task that was invoked by this timer absolutely guarantees that the ongoing task execution is the last task execution that will ever be performed by this timer.</span><br><span class="line">This method may be called repeatedly; the second and subsequent calls have no effect.</span><br><span class="line">*/</span><br><span class="line">public void cancel() &#123;</span><br><span class="line">    synchronized(queue) &#123;</span><br><span class="line">        thread.newTasksMayBeScheduled = false;</span><br><span class="line">        queue.clear();</span><br><span class="line">        queue.notify();  // In case queue was already empty.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后一行代码，queue.notify()起什么作用？注释说”In case queue was already empty”是什么意思？这是为了确保TimerThread停止下来。再回到TimerThread.mainLoop代码，可以看到，如果外部线程调用Timer.cancel时，TimerThread正在执行任务，当任务执行完成后，mainLoop会终止下来。但是如果当外部Timer.cancel时，queue已经空了，TimerThread阻塞在<code>queue.wait()</code>上，这个时候Timer.cancel不调用<code>queue.notify()</code>，TimerThread将永远阻塞在那里，不能终止。</p>
<h4 id="3-1-4-schedule还是scheduleAtFixedRate"><a href="#3-1-4-schedule还是scheduleAtFixedRate" class="headerlink" title="3.1.4 schedule还是scheduleAtFixedRate?"></a>3.1.4 schedule还是scheduleAtFixedRate?</h4><p>向Timer提交周期性任务的时候，是使用schedule还是scheduleAtFixedRate。有本书里，称schedule是schedule at fixed delay，和scheduleAtFixedRate对应。那到底是什么是fixed dealy，什么是fixed rate呢？举一个例子，假如我现在有一个周期任务A，自身运行时间很短，希望这个任务每10s运行一次；又有一个一次性任务B，运行时间是40s。按照下面的代码提交任务，运行情况是怎么样呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line"></span><br><span class="line">timer.schedule(B, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 提交一次性任务B，B运行时间40s</span></span><br><span class="line">timer.schedule(A, <span class="number">0</span>, <span class="number">10</span>*<span class="number">1000</span>); <span class="comment">// 提交周期性任务，每10s运行一次。以fixed delay方式，</span></span><br></pre></td></tr></table></figure>

<p>fix delay是指一个任务被延误执行后，不管之前错过了多少次执行，继续以固定的delay时间（这里就是10s）执行后续任务实例。如下图：</p>
<p><img src="https://dzmiba.com/fixed_delay.jpg" alt="fixed_rate"></p>
<p>再看下面以fixed rate方式提交任务的代码，以及运行情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line"></span><br><span class="line">timer.schedule(B, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 提交一次性任务B，B运行时间40s</span></span><br><span class="line">timer.scheduleAtFixedRate(A, <span class="number">0</span>, <span class="number">10</span>*<span class="number">1000</span>); <span class="comment">// 提交周期性任务，每10s运行一次。以fixed rate方式，</span></span><br></pre></td></tr></table></figure>

<p><img src="https://dzmiba.com/fixed_rate.jpg" alt="fixed_rate"></p>
<p>我们可以看到fixed rate方式，当一个任务被延误后，它在后面会把错误的执行次数给补上。这种方式，可能会出现一个被延误执行的任务，在某个时间连续执行多次。</p>
<p>上面两种方式具体是怎么实现的呢？jdk Timer里面用了一个比较巧妙的方式，看代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mainLoop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimerTask task;</span><br><span class="line">                <span class="keyword">boolean</span> taskFired;</span><br><span class="line">                <span class="keyword">synchronized</span>(queue) &#123;</span><br><span class="line">                    <span class="comment">// Wait for queue to become non-empty</span></span><br><span class="line">                    <span class="keyword">while</span> (queue.isEmpty() &amp;&amp; newTasksMayBeScheduled)</span><br><span class="line">                        queue.wait();</span><br><span class="line">                    <span class="keyword">if</span> (queue.isEmpty())</span><br><span class="line">                        <span class="keyword">break</span>; <span class="comment">// Queue is empty and will forever remain; die</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Queue nonempty; look at first evt and do the right thing</span></span><br><span class="line">                    <span class="keyword">long</span> currentTime, executionTime;</span><br><span class="line">                    task = queue.getMin();</span><br><span class="line">                    <span class="keyword">synchronized</span>(task.lock) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (task.state == TimerTask.CANCELLED) &#123;</span><br><span class="line">                            queue.removeMin();</span><br><span class="line">                            <span class="keyword">continue</span>;  <span class="comment">// No action required, poll queue again</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        currentTime = System.currentTimeMillis();</span><br><span class="line">                        executionTime = task.nextExecutionTime;</span><br><span class="line">                        <span class="keyword">if</span> (taskFired = (executionTime&lt;=currentTime)) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (task.period == <span class="number">0</span>) &#123; <span class="comment">// Non-repeating, remove</span></span><br><span class="line">                                queue.removeMin();</span><br><span class="line">                                task.state = TimerTask.EXECUTED;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123; <span class="comment">// Repeating task, reschedule</span></span><br><span class="line">                                queue.rescheduleMin(</span><br><span class="line">                                  task.period&lt;<span class="number">0</span> ? currentTime   - task.period</span><br><span class="line">                                                : executionTime + task.period);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!taskFired) <span class="comment">// Task hasn&#x27;t yet fired; wait</span></span><br><span class="line">                        queue.wait(executionTime - currentTime);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (taskFired)  <span class="comment">// Task fired; run it, holding no locks</span></span><br><span class="line">                    task.run();</span><br><span class="line">            &#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>还是Timer.mainLoop代码，秘密就在<code>task.period &lt; 0 ? currentTime - task.period : executionTime + task.period</code>这里。当使用schedule提交周期任务时，这个任务的period被取反成负数了，下一次执行的时间是<strong>当前时间</strong> + 任务本身的period。</p>
<h2 id="四、Timer使用场景"><a href="#四、Timer使用场景" class="headerlink" title="四、Timer使用场景"></a>四、Timer使用场景</h2><p>Timer是Java SDK1.3引入的，SDK1.5时引入了ScheduledThreadPoolExecutor更能更强大，也更稳定，更精确。大多数时候，应该使用ScheduledThreadPoolExecutor。Timer优势在于使用简单，轻量级，比较适合轻量级任务且精度要求不高的场景，比如周期性发送心跳包，周期性清理缓存，周期性更新状态。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Timer</tag>
        <tag>JDK源码</tag>
      </tags>
  </entry>
</search>
